name: CI
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      image-tag: ${{ steps.output-image-tag.outputs.image-tag }}
    defaults:
      run:
        working-directory: buildkit
    steps:
    - name: Checkout idc-isle-buildkit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: buildkit
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Setup Gradle Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Log in to Docker Hub
      run: docker login -u '${{ secrets.REGISTRY_USER }}' -p '${{ secrets.REGISTRY_PASS }}' '${{ secrets.REGISTRY_URL }}'
    - name: Enable buildkit
      shell: bash
      run: |
        echo '{"experimental": "enabled"}' > ~/.docker/config.json
    - name: Build Docker images
      # N.B. when projects are excluded from building (e.g '-x <project>:build'), they also need to be excluded from pushing, below (e.g. '-x <project>:push')
      run: ./gradlew --console plain build '-Prepository=${{ secrets.REPOSITORY }}' -x demo:build -x matomo:build -x recast:build -x milliner:build -x postgresql:build -x fcrepo:build -x blazegraph:build
    - name: Push Docker images
      # N.B. when projects are excluded from building (e.g '-x <project>:build') above, they also need to be excluded from pushing (e.g. '-x <project>:push')
      run: ./gradlew --console plain push '-Prepository=${{ secrets.REPOSITORY }}' '-PregistryUrl=${{ secrets.REGISTRY_URL }}' '-PregistryUsername=${{ secrets.REGISTRY_USER }}' '-PregistryPassword=${{ secrets.REGISTRY_PASS }}' -x demo:push -x matomo:push -x recast:push -x milliner:push -x postgresql:push -x fcrepo:push -x blazegraph:push
    - name: Output image tag
      id: output-image-tag
      # Set the image tag, same used by the isle-gradle-docker-plugin
      run: echo ::set-output name=image-tag::$(git describe --tags --always --first-parent)
  isle-dc-head:
    name: Establish idc-isle-dc commit hash used for tests
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ steps.establish-head.outputs.commit }}
    steps:
      - name: Checkout idc-isle-dc
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: jhu-idc/idc-isle-dc
      - name: Establish idc-isle-dc HEAD ref
        id: establish-head
        run: echo "::set-output name=commit::$(git log -1 --format='%H')"
      - run: echo "Using idc-isle-dc ref ${{ steps.establish-head.outputs.commit }} for tests"
  static:
    name: Create Drupal Static Image
    needs: [ build, isle-dc-head ]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    defaults:
      run:
        working-directory: isle-dc
    steps:
      - name: Checkout idc-isle-dc
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: jhu-idc/idc-isle-dc
          ref: ${{ needs.isle-dc-head.outputs.commit }}
          path: isle-dc
      - name: Set image tag
        run: |
          echo "Using image tag ${{needs.build.outputs.image-tag}}"
          sed -i.bak -e 's@^TAG.*$@TAG=${{needs.build.outputs.image-tag}}@' .env
          grep TAG .env
      - name: Make static image
        run: make static-docker-compose.yml up
      - name: Drush test
        run: docker-compose exec -T drupal drush -d status
      - name: Export image
        run: make static-drupal-image-export
      - uses: actions/upload-artifact@v2
        with:
          name: drupal-image
          path: isle-dc/images
  test-matrix:
    name: Generate idc-isle-dc test matrix
    needs: isle-dc-head
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.excludes-matrix.outputs.matrix }}
    steps:
      - name: Checkout idc-isle-dc
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: jhu-idc/idc-isle-dc
          ref: ${{ needs.isle-dc-head.outputs.commit }}
      - name: Generate Test Matrix
        id: test-matrix
        uses: jhu-idc/idc-matrixgen@1.0.0
      - name: Exclude nightly jobs
        id: excludes-matrix
        uses: jhu-idc/idc-matrixgen@1.0.0
        with:
          glob: '*nightly*.sh'
          exclude: true
          matrix: ${{ steps.test-matrix.outputs.matrix }}
      - name: Dump Test Matrix
        env:
          MATRIX: ${{ steps.excludes-matrix.outputs.matrix }}
        run: echo ${MATRIX}
  test:
    name: Run idc-isle-dc tests
    runs-on: ubuntu-latest
    needs: [ build, static, test-matrix, isle-dc-head ]
    strategy:
      matrix: ${{ fromJSON(needs.test-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout idc-isle-dc
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: jhu-idc/idc-isle-dc
          ref: ${{ needs.isle-dc-head.outputs.commit }}
      - name: Set image tag
        run: |
          echo "Using image tag ${{needs.build.outputs.image-tag}}"
          sed -i.bak -e 's@^TAG.*$@TAG=${{needs.build.outputs.image-tag}}@' .env
          grep TAG .env
      - name: Download Drupal Image
        uses: actions/download-artifact@v2
        with:
          name: drupal-image
          path: images
      - name: Load Drupal Image
        run: docker load < images/static-drupal.tar
      - name: Run ${{ matrix.test }}
        run: make up test test=${{ matrix.test }}
      - name: Capture Logs
        if: failure()
        run: |
          mkdir -p end-to-end/reports
          docker-compose logs drupal 2>&1 | tee end-to-end/reports/${{ matrix.test }}/docker-drupal.log
          docker-compose logs 2>&1 | tee end-to-end/reports/${{ matrix.test }}/docker-allcontainers.log
      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: reports-${{matrix.test}}
          path: end-to-end/reports
